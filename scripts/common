# JULEA - Flexible storage framework
# Copyright (C) 2017-2020 Michael Kuhn
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

find_meson_build_directory ()
{
	local build_dir
	local root

	root="$1"

	test -n "${root}" || return 1
	test -d "${root}" || return 1

	# We just return the first directory we find for now
	build_dir="$(find "${root}" -maxdepth 2 -name meson-private | head --lines=1)"
	build_dir="${build_dir%/meson-private}"

	printf '%s' "${build_dir}"
}

get_directory ()
{
	local directory

	directory="$1"

	test -n "${directory}" || return 1
	test -d "${directory}" || return 1

	printf '%s' "$(readlink --canonicalize-existing -- "${directory}")"
}

error_build_directory ()
{
	printf 'Build directory could not be found.\n' >&2
	printf '* If you have installed JULEA, please set JULEA_PREFIX to the prefix you have installed it in.\n' >&2
	printf '* If you want to use an uninstalled version, make sure the build directory is called "build".\n' >&2

	exit 1
}

set_path ()
{
	local build_dir

	build_dir="$(find_meson_build_directory "${SELF_DIR}/..")"

	if test -n "${JULEA_PREFIX}"
	then
		PATH="${JULEA_PREFIX}/bin:${PATH}"
	elif test -n "${build_dir}"
	then
		PATH="${build_dir}:${PATH}"
	else
		build_dir="$(get_directory "${SELF_DIR}/../build")" || error_build_directory

		PATH="${build_dir}/benchmark:${build_dir}/server:${build_dir}/test:${build_dir}/tools:${PATH}"
	fi

	export PATH
}

set_library_path ()
{
	local build_dir

	build_dir="$(find_meson_build_directory "${SELF_DIR}/..")"

	if test -n "${JULEA_PREFIX}"
	then
		LD_LIBRARY_PATH="${JULEA_PREFIX}/lib64:${JULEA_PREFIX}/lib:${LD_LIBRARY_PATH}"
	elif test -n "${build_dir}"
	then
		LD_LIBRARY_PATH="${build_dir}:${LD_LIBRARY_PATH}"
	else
		build_dir="$(get_directory "${SELF_DIR}/../build")" || error_build_directory

		LD_LIBRARY_PATH="${build_dir}/lib:${LD_LIBRARY_PATH}"
	fi

	export LD_LIBRARY_PATH
}

set_pkg_config_path ()
{
	local build_dir

	build_dir="$(find_meson_build_directory "${SELF_DIR}/..")"

	if test -n "${JULEA_PREFIX}"
	then
		PKG_CONFIG_PATH="${JULEA_PREFIX}/lib64/pkgconfig:${JULEA_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}"
	elif test -n "${build_dir}"
	then
		# FIXME
		return 0
	else
		build_dir="$(get_directory "${SELF_DIR}/../build")" || error_build_directory

		PKG_CONFIG_PATH="${build_dir}/pkg-config:${PKG_CONFIG_PATH}"
	fi

	export PKG_CONFIG_PATH
}

set_backend_path ()
{
	local build_dir

	build_dir="$(find_meson_build_directory "${SELF_DIR}/..")"

	if test -n "${JULEA_PREFIX}"
	then
		return 0
	elif test -n "${build_dir}"
	then
		JULEA_BACKEND_PATH="${build_dir}"
	else
		build_dir="$(get_directory "${SELF_DIR}/../build")" || error_build_directory

		JULEA_BACKEND_PATH="${build_dir}/backend"
	fi

	export JULEA_BACKEND_PATH
}
