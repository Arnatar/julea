#!/bin/sh

# JULEA - Flexible storage framework
# Copyright (C) 2013 Anna Fuchs
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#debug only
set -ex

msg=$(cat $@)

rc=0
rrc=0
rstart=0
rstop=0

DIR_PATH=$(git rev-parse --show-toplevel)

comp=$(git config --local test.compile-test)

if echo $msg | grep "Compile-Test: clean"
then
  comp="Compile-Test: clean"
elif echo $msg | grep "Compile-Test: yes"
then
  comp="Compile-Test: yes"
elif echo $msg | grep "Compile-Test: no"
then
  comp="Compile-Test: no"
fi

if echo $comp | grep "Compile-Test: clean"
then
  echo "Clean compile test"

  $DIR_PATH/waf distclean
  $DIR_PATH/waf configure --prefix=$HOME --debug
  $DIR_PATH/waf || rrc=$?

  if [ $rrc -ne 0 ]
  then
    echo "Clean compile test failed"
    exit 1
  fi

elif echo $comp | grep "Compile-Test: yes"
then
    echo "Compile test"

    $DIR_PATH/waf clean
    $DIR_PATH/waf || rrc=$?

    if [ $rrc -ne 0 ]
    then
      echo "Compile test failed"
      exit 1
    fi

elif echo $comp | grep "Compile-Test: no"
then
    echo "No compile test"
fi


corr=$(git config --local test.correctness-test)

if echo $msg | grep "Correntess-Test: no"
then
  echo "No correctness test"
  exit 0
fi

if echo $corr | grep "Correntess-Test: no"
then
  echo "No correctness test"
  exit 0
fi

BUILD_PATH="$DIR_PATH/build"

export PATH="${BUILD_PATH}/test:${BUILD_PATH}/tools:${ROOT}/tools:${PATH}"
export LD_LIBRARY_PATH="${BUILD_PATH}/lib:${LD_LIBRARY_PATH}"

config_file=$(mktemp --tmpdir=${HOME})
julea-config --data=$(hostname) --metadata=$(hostname) --storage-backend=posix --storage-path=/tmp/julea-fuchs > "${config_file}"

export JULEA_CONFIG="${config_file}"

git stash -q --keep-index
trap "git stash pop -q; rm -f ${config_file}" HUP INT TERM 0

$DIR_PATH/tools/test.sh || rc=$?

if [ $rc -ne 0 ]
then
   date=$(date +"%Y%m%d_%k%M%S")
   branch=$(git symbolic-ref HEAD)
   branch=${branch#refs/heads/}

   if [ $branch = "auto_debug" ]
   then
     rc=0
     git commit -n -m  "$msg --no-pre-commit-hook --no-post-commit-hook" || rc=$?
     echo "Autotest failed, committing to branch $branch"

     if [ $rc -ne 0 ]
     then
       git checkout -b $date
       git commit -n -m  "$msg --no-pre-commit-hook --no-post-commit-hook"
       echo "Commit failed, committing to branch $date"
       exit 1
     fi

   else
     rc=0
     git checkout -b auto_debug || rc=$?

     if [ $rc -ne 0 ]
     then
       git checkout -b $date
       git commit -n -m  "$msg --no-pre-commit-hook --no-post-commit-hook"
       echo "Autotest failed, committing to branch $date"
       exit 1
     fi

     git commit -n -m  "$msg --no-pre-commit-hook --no-post-commit-hook"
     echo "Autotest failed, committing to branch auto_debug"
     exit 1
   fi

   exit 1
fi

rm -f ${config_file}

exit 0
